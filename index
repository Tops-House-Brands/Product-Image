<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Image</title>

    <!-- 
      This section links to Tailwind CSS for styling and Flowbite for the carousel component.
      This allows the carousel to look good and function correctly without needing to install anything.
    -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.3.0/flowbite.min.css" rel="stylesheet" />

    <style>
        /* A little bit of custom style to make sure images fit well */
        .carousel-img {
            width: 100%;
            height: 100%;
            object-fit: contain; /* This ensures the whole image is visible without being stretched */
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 flex items-center justify-center min-h-screen sm:p-4">

    <!-- Main container to center the content, adjusted for mobile -->
    <div class="w-full sm:max-w-2xl mx-auto bg-white dark:bg-gray-800 sm:rounded-lg sm:shadow-lg p-4 sm:p-6">
        
        <h1 class="text-2xl sm:text-3xl font-bold text-center mb-2 text-gray-900 dark:text-white">
            Product Images
        </h1>
        <!-- This paragraph will be updated by JavaScript -->
        <p id="product-item-id" class="text-center text-gray-500 dark:text-gray-400 mb-6"></p>

        <!-- Start of the Carousel Component -->
        <div id="indicators-carousel" class="relative w-full" data-carousel="static">
            
            <!-- New wrapper to control aspect ratio, making it responsive -->
            <div class="relative overflow-hidden rounded-lg aspect-square">
                <!-- Carousel wrapper - This will be populated by JavaScript -->
                <div id="carousel-wrapper" class="w-full h-full">
                     <!-- Image items will be inserted here dynamically -->
                </div>
            </div>

            <!-- Slider indicators - This will be populated by JavaScript -->
            <div id="carousel-indicators" class="absolute z-30 flex -translate-x-1/2 space-x-3 rtl:space-x-reverse bottom-5 left-1/2">
                <!-- Indicator buttons will be inserted here dynamically -->
            </div>

            <!-- Slider controls (Previous/Next buttons) -->
            <button type="button" class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-prev>
                <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                    <!-- Icon color changed here -->
                    <svg class="w-4 h-4 text-blue-500 dark:text-blue-300 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
                    </svg>
                    <span class="sr-only">Previous</span>
                </span>
            </button>
            <button type="button" class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-next>
                <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                    <!-- Icon color changed here -->
                    <svg class="w-4 h-4 text-blue-500 dark:text-blue-300 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                    </svg>
                    <span class="sr-only">Next</span>
                </span>
            </button>
        </div>
        <!-- End of the Carousel Component -->

    </div>

    <!-- This script enables the interactive features of the carousel -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.3.0/flowbite.min.js"></script>

    <!-- Custom JavaScript to handle JSON data and swipe functionality -->
    <script>
        // Wait for the DOM to be fully loaded before running the script
        document.addEventListener('DOMContentLoaded', function () {
            
            // --- This is where you would get the JSON data from a function or API call ---
            const productData = {
              "Item": "8853474045242",
              "ImageUrls": [
                "https://assets.tops.co.th/SMARTER-SmarterGarbageBags36X45inches8pcs-8853474045242-1?$JPEG$",
                "https://assets.tops.co.th/SMARTER-SmarterGarbageBags36X45inches8pcs-8853474045242-2?$JPEG$",
                "https://assets.tops.co.th/SMARTER-SmarterGarbageBags36X45inches8pcs-8853474045242-3?$JPEG$"
              ]
            };
            // -----------------------------------------------------------------------------

            // Get the container elements from the HTML
            const carouselElement = document.getElementById('indicators-carousel');
            const carouselWrapper = document.getElementById('carousel-wrapper');
            const carouselIndicators = document.getElementById('carousel-indicators');
            const productIdElement = document.getElementById('product-item-id');

            // Clear any existing content
            carouselWrapper.innerHTML = '';
            carouselIndicators.innerHTML = '';

            // Update the product item ID
            productIdElement.textContent = `Item: ${productData.Item}`;

            // Loop through the image URLs to create carousel items and indicators
            productData.ImageUrls.forEach((url, index) => {
                // Create the carousel item (the image slide)
                const item = document.createElement('div');
                item.className = 'hidden duration-700 ease-in-out';
                item.setAttribute('data-carousel-item', '');
                if (index === 0) {
                    item.setAttribute('data-carousel-item', 'active');
                }
                item.innerHTML = `<img src="${url}" class="absolute block carousel-img top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2" alt="Product Image ${index + 1}">`;
                carouselWrapper.appendChild(item);

                // Create the indicator button
                const indicator = document.createElement('button');
                indicator.type = 'button';
                indicator.className = 'w-3 h-3 rounded-full';
                indicator.setAttribute('aria-label', `Slide ${index + 1}`);
                indicator.setAttribute('data-carousel-slide-to', index);
                if (index === 0) {
                    indicator.setAttribute('aria-current', 'true');
                } else {
                    indicator.setAttribute('aria-current', 'false');
                }
                carouselIndicators.appendChild(indicator);
            });

            // --- START: Code for enabling swipe on mobile ---
            
            // Create a new Carousel instance from Flowbite to control it with code
            const carousel = new Carousel(carouselElement);

            let touchStartX = 0;
            let touchEndX = 0;
            const swipeThreshold = 50; // Minimum distance for a swipe to be registered

            function handleSwipeGesture() {
              // Swipe from right to left (to next slide)
              if (touchEndX < touchStartX && touchStartX - touchEndX > swipeThreshold) {
                carousel.next();
              }
              // Swipe from left to right (to previous slide)
              if (touchEndX > touchStartX && touchEndX - touchStartX > swipeThreshold) {
                carousel.prev();
              }
            }

            // Add event listener for when a touch starts
            carouselElement.addEventListener('touchstart', e => {
              touchStartX = e.changedTouches[0].screenX;
            }, { passive: true });

            // Add event listener for when a touch ends
            carouselElement.addEventListener('touchend', e => {
              touchEndX = e.changedTouches[0].screenX;
              handleSwipeGesture();
            }, { passive: true });

            // --- END: Code for enabling swipe on mobile ---
        });
    </script>
</body>
</html>
